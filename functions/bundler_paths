unset_paths() {
  if [[ -n $OLD_PATH ]]; then
    export PATH=$OLD_PATH
    unset OLD_PATH
  fi

  if [[ -n $ORIGINAL_GEM_PATH ]]; then
    export GEM_PATH=$ORIGINAL_GEM_PATH
    unset ORIGINAL_GEM_PATH
  else
    unset GEM_PATH
  fi
}

set_paths() {
  if [[ -z $GEM_PATH ]]; then
    export GEM_PATH=$correct_dir
  else
    export GEM_PATH=$correct_dir:$GEM_PATH
  fi

  export OLD_PATH=$PATH
  export PATH=$correct_dir/bin:$PATH
}

get_correct_ruby_version_for() {
  case $(ruby --version) in
    *1.8*)
      echo $dir_or_dirs[(r)*1.8*]
      ;;
    *1.9*)
      echo $dir_or_dirs[(r)*1.9*]
      ;;
    *2.0*)
      echo $dir_or_dirs[(r)*2.0*]
      ;;
    *2.1*)
      echo $dir_or_dirs[(r)*2.1*]
      ;;
    *2.2*)
      echo $dir_or_dirs[(r)*2.2*]
      ;;
    *2.3*)
      echo $dir_or_dirs[(r)*2.3*]
      ;;
    *2.4*)
      echo $dir_or_dirs[(r)*2.4*]
      ;;
    *2.5*)
      echo $dir_or_dirs[(r)*2.5*]
      ;;
    *2.6*)
      echo $dir_or_dirs[(r)*2.6*]
      ;;
    *2.7*)
      echo $dir_or_dirs[(r)*2.7*]
      ;;
    *3.0*)
      echo $dir_or_dirs[(r)*3.0*]
      ;;
    *3.1*)
      echo $dir_or_dirs[(r)*3.1*]
      ;;
  esac
}

bundler_paths_preexec() {
  local dir_or_dirs correct_dir bundle_path

  unset_paths

  [[ -e $PWD/.bundle/config ]] || return 0

  bundle_path=$(grep BUNDLE_PATH .bundle/config | cut -d' ' -f2 | tr -d \") || return 0

  dir_or_dirs=( $PWD/$bundle_path/ruby/*(/N) )

  if [[ -z $dir_or_dirs ]]; then
    return 0
  elif [[ ${#dir_or_dirs} -lt 2 ]]; then
    correct_dir=$dir_or_dirs
  else
    correct_dir=$(get_correct_ruby_version_for $dir_or_dirs)
  fi

  set_paths
}

add-zsh-hook preexec bundler_paths_preexec
#eval "$(functions prexec)"
